{"version":3,"sources":["images/sun.png","Components/Today.js","Components/Form.js","Components/FiveDay.js","App.js","serviceWorker.js","index.js","images/cloudy.png","images/rain.png","images/snowflake.png","images/wind.png"],"names":["module","exports","Today","weather","style","display","flexDirection","alignItems","justifyContent","backgroundColor","margin","boxShadow","borderRadius","fontSize","fontFamily","color","paddingTop","main","name","getCity","maxWidth","padding","weatherType","src","Cloudy","alt","width","Rain","Sun","Snow","Wind","console","log","getTodaysWeatherImage","paddingBottom","Math","round","temp","getTodaysWeather","Form","zipCodeBox","setZipCodeBox","submitHandler","height","boxSizing","type","placeholder","value","onChange","e","target","marginLeft","onClick","FiveDay","fiveDayWeather","fiveDays","WEATHERSTYLE","STYLE2","list","forEach","weatherEntry","find","day","dt_txt","split","index","push","length","splice","marginRight","map","getFiveDaysWeatherImage","weatherDate","Date","getDay","getFiveDaysWeatherDay","App","useState","setWeather","zipCode","setZipCode","setFiveDayWeather","fetchData","a","Axios","get","response","data","fetchData2","useEffect","className","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b113b18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sun.bcb3306a.png\";","import React from 'react';\r\nimport Sun from '../images/sun.png';\r\nimport Cloudy from '../images/cloudy.png';\r\nimport Rain from '../images/rain.png';\r\nimport Snow from '../images/snowflake.png';\r\nimport Wind from '../images/wind.png';\r\n\r\nconst Today = ({weather}) => {\r\n\r\n    const getTodaysWeather = () =>{\r\n        if(weather.main) return ((Math.round(weather.main.temp) + 'Â°F'));\r\n    }\r\n\r\n    const getCity = () =>{\r\n        if(weather.main) return (weather.name);\r\n    }\r\n\r\n    const getTodaysWeatherImage = () =>{\r\n        let weatherType;\r\n        if(weather.weather) {\r\n            weatherType = (weather.weather[0].main);\r\n        }\r\n      \r\n        switch (weatherType){\r\n            case 'Clouds':\r\n                return <img src={Cloudy} alt=\"Clouds\" width=\"210px\" />\r\n            case 'Rain':\r\n                return <img src={Rain} alt=\"Rain\" width=\"210px\"/>\r\n            case 'Clear':\r\n                return <img src={Sun} alt=\"Sun\" width=\"210px\"/>\r\n            case 'Snow':\r\n                return <img src={Snow} alt=\"Snow\" width=\"210px\"/>\r\n            case 'Wind':\r\n                return <img src={Wind} alt=\"Wind\" width=\"210px\"/>   \r\n            default:\r\n                console.log(\"default\")\r\n        }\r\n    }\r\n    \r\n    const WEATHERSTYLE ={\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        backgroundColor:\"#F2F2F2\",\r\n        margin:\"0 35%\",\r\n        boxShadow: \"7px 10px 12px -5px rgba(0,0,0, 0.30)\",\r\n        borderRadius: \"20px\"\r\n    }\r\n        \r\n     \r\n\r\n    return (\r\n        <div style={WEATHERSTYLE}>\r\n            <div>\r\n                <div style={{fontSize:\"35px\",fontFamily:\"'Comic Sans MS', cursive, sans-serif\",color:\"#01455B\",paddingTop:\"5px\"}}>\r\n                    {getCity()}\r\n                </div>\r\n            </div>\r\n            <div style={{\r\n                maxWidth:\"20%\",\r\n                padding: \"2px\",\r\n            }}>\r\n            </div>\r\n            <div>\r\n                {getTodaysWeatherImage()}\r\n            </div>\r\n            <div style={{\r\n                fontSize: \"35px\",\r\n                fontFamily:\"'Comic Sans MS', cursive, sans-serif\",\r\n                color:\"#01455B\",\r\n                paddingBottom:\"5px\"\r\n            }}>\r\n                {getTodaysWeather() + \" Today\"}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Today;","import React from 'react';\r\n\r\nconst Form = ({zipCodeBox, setZipCodeBox, submitHandler}) => {\r\n\r\n    const INPUTSTYLE ={\r\n        width: \"100%\",\r\n        padding: \"6px 15px\",\r\n        boxSizing: \"border-box\",\r\n        borderRadius: \"5px\"\r\n    }\r\n\r\n    return (\r\n        <div style={{backgroundColor:\"#F2F2F2\", display: \"inline-flex\", padding:\"15px\",height:\"22px\",boxShadow: \"7px 10px 12px -5px rgba(0,0,0, 0.56)\",borderRadius: \"5px\"}}>\r\n            <input style={INPUTSTYLE} type=\"text\" placeholder=\"Enter zip code..\" value={zipCodeBox} onChange={(e) => setZipCodeBox(e.target.value)}/>\r\n            <button style={{marginLeft:\"10px\",color:\"#01455B\",fontFamily:\"'Comic Sans MS', cursive, sans-serif\",fontSize:\"14px\"}} onClick={submitHandler}>Send</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport Sun from '../images/sun.png';\r\nimport Cloudy from '../images/cloudy.png';\r\nimport Rain from '../images/rain.png';\r\nimport Snow from '../images/snowflake.png';\r\nimport Wind from '../images/wind.png';\r\n\r\nconst FiveDay = ({fiveDayWeather}) => {\r\n    let fiveDays =[];\r\n\r\n    const getFiveDaysWeather = () =>{\r\n     \r\n\r\n        if(fiveDayWeather.list) {\r\n          \r\n           \r\n\r\n            fiveDayWeather.list.forEach(weatherEntry => {\r\n                if (!fiveDays.find((day) => day.dt_txt.split(\" \")[0] === weatherEntry.dt_txt.split(\" \")[0])){\r\n                    fiveDays.push(weatherEntry);\r\n                }else{\r\n                    // let weatherIndex = fiveDays.indexOf((day) => day.dt_txt.split(\" \")[0] === weatherEntry.dt_txt.split(\" \")[0]);\r\n                    console.log(fiveDays.forEach((day, index) => {\r\n                        if(day.dt_txt.split(\" \")[0] === weatherEntry.dt_txt.split(\" \")[0]) return index;\r\n                    })); \r\n\r\n                }\r\n                \r\n            })\r\n            if(fiveDays.length > 5){fiveDays.splice(5,1);}\r\n        }\r\n    \r\n    }\r\n\r\n     \r\n    const getFiveDaysWeatherImage = (weatherType,weather) => {\r\n        switch (weatherType){\r\n                case 'Clouds':\r\n                    return (\r\n                        <div>\r\n                             <img src={Cloudy} alt=\"Clouds\" width=\"90px\" />\r\n                        </div>\r\n                    );\r\n                case 'Rain':\r\n                    return (\r\n                        <div>\r\n                            <img src={Rain} alt=\"Rain\" width=\"90px\"/>\r\n                        </div>\r\n                    );\r\n                case 'Clear':\r\n                    return (\r\n                        <div>\r\n                            <img src={Sun} alt=\"Sun\" width=\"90px\"/>\r\n                        </div>\r\n                    );\r\n                case 'Snow':\r\n                    return (\r\n                        <div>\r\n                            <img src={Snow} alt=\"Snow\" width=\"90px\"/>\r\n                        </div>\r\n                    );\r\n                case 'Wind':\r\n                    return (\r\n                    <div>\r\n                        <img src={Wind} alt=\"Wind\" width=\"90px\"/>\r\n                    </div>\r\n                );\r\n                default:\r\n            }\r\n\r\n            \r\n    }\r\n\r\n    const getFiveDaysWeatherDay = (weatherDate) =>{\r\n        let parsedDate = new Date(weatherDate);\r\n\r\n        switch(parsedDate.getDay()){\r\n            case 0:\r\n                return \"Sunday\";\r\n            case 1:\r\n                return \"Monday\";\r\n            case 2:\r\n                return \"Tuesday\";\r\n            case 3:\r\n                return \"Wednesday\";\r\n            case 4:\r\n                return \"Thursday\";\r\n            case 5:\r\n                return \"Friday\";\r\n            case 6:\r\n                return \"Saturday\";\r\n            default:\r\n        }\r\n    }\r\n        \r\n  \r\n    \r\n    const WEATHERSTYLE ={\r\n        backgroundColor:\"#F2F2F2\",\r\n        padding:\"15px\",\r\n        margin:\"20px\",\r\n        boxShadow: \"7px 10px 12px -5px rgba(0,0,0, 0.56)\",\r\n        borderRadius: \"20px\",\r\n        fontSize: \"25px\",\r\n        fontFamily:\"'Comic Sans MS', cursive, sans-serif\",\r\n        color:\"#01455B\",\r\n        width: \"10%\"\r\n    }\r\n\r\n    const STYLE2 ={\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    }\r\n        \r\n    const STYLE ={\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            marginRight: \"3px\",\r\n            \r\n        }\r\n     \r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {getFiveDaysWeather()}\r\n                <div style={STYLE}>\r\n                {fiveDays.map((day) => (\r\n                    <div style={WEATHERSTYLE}>\r\n                            <div style={STYLE2}>   \r\n                                {getFiveDaysWeatherImage(day.weather[0].main)}\r\n                            </div>\r\n                            <div style={STYLE2}>\r\n                                {Math.round(day.main.temp) + 'Â°F'}\r\n                            </div>\r\n                            <div style={STYLE2}>\r\n                                {getFiveDaysWeatherDay(day.dt_txt)}\r\n                            </div>\r\n                           \r\n                    </div>\r\n                ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FiveDay;","import React , {useState, useEffect} from 'react';\nimport './App.css';\nimport Today from './Components/Today';\nimport Form from './Components/Form';\nimport Axios from 'axios';\nimport FiveDay from './Components/FiveDay';\n\nfunction App() {\n  const [weather, setWeather] = useState({});\n  const [zipCode, setZipCode] = useState('92602');\n  const [zipCodeBox,setZipCodeBox] = useState('');\n  const [fiveDayWeather, setFiveDayWeather] = useState({});\n\n  //key1 = 610a0fb4717bc43d6899ee28f64aaf56\n  //key2 = 59d6b4a3e198d52f85b5255d190bfb69\n  const fetchData = async() => {\n    const response = await Axios.get('https://api.openweathermap.org/data/2.5/weather?zip=' + zipCode + '&APPID=59d6b4a3e198d52f85b5255d190bfb69&units=imperial');\n\n    setWeather(response.data);\n}\n  const fetchData2 = async() => {\n    const response = await Axios.get('https://api.openweathermap.org/data/2.5/forecast?zip=' + zipCode + '&APPID=59d6b4a3e198d52f85b5255d190bfb69&units=imperial');\n\n    setFiveDayWeather(response.data);   \n  \n  }\n\n    useEffect(() => {\n      fetchData();\n      fetchData2();\n    }, [zipCode]);\n\n    const submitHandler = (e) => {\n      e.preventDefault();\n\n      setZipCode(zipCodeBox);\n      setZipCodeBox('');\n    }\n\n\n     \n  return (\n    <div className=\"App\">\n      <h1 style={{fontFamily:\"'Comic Sans MS', cursive, sans-serif\",color:\"#01455B\",fontSize:\"45px\"}}>Weather Forecast</h1>\n      <div style={{paddingBottom:\"2%\"}}>\n        <Today weather={weather}/>\n      </div>\n      <div style={{paddingBottom:\"2%\"}}>\n        <Form zipCodeBox={zipCodeBox} setZipCodeBox={setZipCodeBox}submitHandler={submitHandler}/>\n      </div>\n      <div>\n        <FiveDay fiveDayWeather={fiveDayWeather}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cloudy.176637e3.png\";","module.exports = __webpack_public_path__ + \"static/media/rain.d10b6c70.png\";","module.exports = __webpack_public_path__ + \"static/media/snowflake.ba186b3f.png\";","module.exports = __webpack_public_path__ + \"static/media/wind.f6718ab1.png\";"],"sourceRoot":""}